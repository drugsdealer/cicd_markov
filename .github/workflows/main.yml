name: Stage Store CI/CD Full

on:
  push:
    branches: [ main, 'feature/*', 'hotfix/*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with: { python-version: '3.10' }
      - name: Install deps (optional)
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; else echo "no reqs"; fi
      - name: Dummy tests
        run: echo "Tests passed"
      - name: Add PR label test-passed
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: test-passed

  security:
    name: Security Check
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      - name: Install safety & flake8
        run: |
          python -m pip install --upgrade pip
          pip install safety flake8 || true
      - name: Safety scan
        run: safety check || true
      - name: Lint (flake8)
        run: flake8 . || true
      - name: Add PR label sec-passed
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: sec-passed

  version:
    name: Update Version
    runs-on: ubuntu-latest
    needs: security
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
    steps:
      - uses: actions/checkout@v3
      - id: readver
        name: Read current version
        run: |
          if [ -f version ]; then CURR=$(cat version); else CURR="0.1.0"; echo "$CURR" > version; fi
          echo "current_version=$CURR" >> $GITHUB_OUTPUT
      - id: bump
        name: Bump version (minor for feature/* else patch)
        run: |
          OLD=${{ steps.readver.outputs.current_version }}
          IFS='.' read -r MAJ MIN PATCH <<< "$OLD"
          if [[ "${GITHUB_REF}" == refs/heads/feature/* ]]; then MIN=$((MIN + 1)); else PATCH=$((PATCH + 1)); fi
          NEW="$MAJ.$MIN.$PATCH"
          echo "$NEW" > version
          echo "new_version=$NEW" >> $GITHUB_OUTPUT
          echo "Updated version: $OLD -> $NEW"
      - name: Commit version file
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add version
          git commit -m "version: ${{ steps.bump.outputs.new_version }} <- ${{ steps.readver.outputs.current_version }}" || true
          git push || true
      - name: Add PR label version-updated
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: version-updated

  changelog:
    name: Generate CHANGELOG
    runs-on: ubuntu-latest
    needs: version
    outputs:
      tag: ${{ steps.buildlog.outputs.tag }}
    steps:
      - uses: actions/checkout@v3
        with: { fetch-depth: 0 }
      - id: buildlog
        name: Build changelog entry
        run: |
          V="v${{ needs.version.outputs.new_version }}"
          DATE="$(date +'%Y-%m-%d %H:%M')"
          BRANCH="${GITHUB_REF_NAME}"
          MSG="$(git log -1 --pretty=%s)"
          SHA="$(git rev-parse --short HEAD)"
          {
            echo "## ${V} ‚Äî ${DATE}"
            echo "- Branch: ${BRANCH}"
            echo "- Commit: ${SHA} ‚Äî ${MSG}"
            echo
          } > .changelog_entry
          if [ -f CHANGELOG.md ]; then cat .changelog_entry CHANGELOG.md > .tmp && mv .tmp CHANGELOG.md; else mv .changelog_entry CHANGELOG.md; fi
          echo "tag=${V}" >> $GITHUB_OUTPUT
      - name: Commit changelog
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add CHANGELOG.md
          git commit -m "changelog: ${{ steps.buildlog.outputs.tag }}" || true
          git push || true
      - uses: actions/upload-artifact@v4
        with: { name: changelog, path: CHANGELOG.md }
      - name: Add PR label changelog
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: changelog

  dockerhub:
    name: Publish DockerHub
    runs-on: ubuntu-latest
    needs: [version, changelog]
    env:
      DH_USER: ${{ secrets.DOCKERHUB_USERNAME }}
      VERSION_TAG: v${{ needs.version.outputs.new_version }}
    steps:
      - uses: actions/checkout@v3
      - id: repo
        name: Normalize repo name to lowercase
        run: |
          LOW=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')
          echo "repo=${LOW}" >> $GITHUB_OUTPUT
      - name: Ensure README.md exists
        run: |
          if [ ! -f README.md ]; then
            echo "# ${{ github.event.repository.name }}" > README.md
            echo >> README.md
            echo "Automated build via GitHub Actions." >> README.md
          fi
      - uses: docker/login-action@v3
        with:
          username: ${{ env.DH_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build & Push image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DH_USER }}/${{ steps.repo.outputs.repo }}:${{ env.VERSION_TAG }}
            ${{ env.DH_USER }}/${{ steps.repo.outputs.repo }}:latest
      - name: Update DockerHub description (peter-evans)
        id: desc1
        uses: peter-evans/dockerhub-description@v3
        continue-on-error: true
        with:
          username: ${{ env.DH_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ env.DH_USER }}/${{ steps.repo.outputs.repo }}
          short-description: ${{ github.event.repository.description }}
          readme-filepath: README.md
      - name: Update DockerHub description (fallback)
        if: ${{ steps.desc1.outcome == 'failure' }}
        uses: crazy-max/ghaction-dockerhub-description@v3
        with:
          username: ${{ env.DH_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ env.DH_USER }}/${{ steps.repo.outputs.repo }}
          readme-filepath: README.md
      - name: Add PR label dockerhub
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: dockerhub

  notify:
    name: Notify Telegram
    runs-on: ubuntu-latest
    needs: dockerhub
    # —É—Å–ª–æ–≤–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ —Å–æ–±—ã—Ç–∏—é/–≤–µ—Ç–∫–µ (—Å–µ–∫—Ä–µ—Ç—ã –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞ —à–∞–≥–µ)
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    steps:
      - uses: actions/download-artifact@v4
        with: { name: changelog, path: artifacts }
      - name: Send Telegram
        uses: appleboy/telegram-action@master
        if: ${{ secrets.TELEGRAM_TOKEN != '' && secrets.TELEGRAM_TO != '' }}
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ‚úÖ –í—ã–ø—É—â–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: v${{ needs.version.outputs.new_version }}
            üì¶ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${{ github.repository }}
            üîÄ –í–µ—Ç–∫–∞: ${{ github.ref_name }}
            üê≥ DockerHub: https://hub.docker.com/r/${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}/tags
            ‚ñ∂Ô∏è Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          document: artifacts/CHANGELOG.md

  release:
    name: GitHub Release
    runs-on: ubuntu-latest
    needs: [dockerhub, notify]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v4
        with: { name: changelog, path: artifacts }
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.version.outputs.new_version }}
          name: Release v${{ needs.version.outputs.new_version }}
          body_path: artifacts/CHANGELOG.md
          files: artifacts/CHANGELOG.md
